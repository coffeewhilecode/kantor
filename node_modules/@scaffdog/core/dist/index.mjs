import { parse } from '@scaffdog/engine';
import { toString } from 'mdast-util-to-string';
import markdown from 'remark-parse';
import { unified } from 'unified';
import { visitParents } from 'unist-util-visit-parents';

const VARIABLES_SECTION_TITLE_REGEX = /^variables/i;
const VARIABLE_REGEX = /^([_$a-z][0-9a-z_$]*)\s*:\s*(.*)\s*$/i;
const parseVariable = (input) => {
  const m = VARIABLE_REGEX.exec(input);
  if (m == null) {
    return ["", ""];
  }
  return [m[1], m[2]];
};
const extract = (input, options) => {
  const variables = /* @__PURE__ */ new Map();
  const templates = [];
  const ast = unified().use(markdown).parse(input);
  let isInVariables = false;
  let filename = null;
  visitParents(ast, (node) => {
    switch (node.type) {
      case "heading": {
        if (node.depth !== 1) {
          filename = null;
          break;
        }
        const text = toString(node).trim();
        if (!text) {
          filename = null;
          break;
        }
        if (VARIABLES_SECTION_TITLE_REGEX.test(text)) {
          isInVariables = true;
          filename = null;
          break;
        }
        filename = text;
        break;
      }
      case "code": {
        if (filename != null) {
          templates.push({
            filename: parse(filename, options),
            content: parse(toString(node), options)
          });
          filename = null;
        }
        break;
      }
      case "list": {
        if (isInVariables) {
          visitParents(node, (child) => {
            if (child.type === "listItem") {
              const [key, value] = parseVariable(toString(child).trim());
              if (key && value) {
                variables.set(key, parse(value, options));
              }
            }
          });
        }
        break;
      }
    }
  });
  return {
    variables,
    templates
  };
};

export { extract };
