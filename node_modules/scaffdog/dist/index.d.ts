import { LoadConfigResult } from '@scaffdog/config';
export { LoadConfigResult } from '@scaffdog/config';
import { Context, VariableRecord, ResolvedConfig } from '@scaffdog/types';
export { Context, ResolvedConfig, Variable, VariableRecord } from '@scaffdog/types';
import { Template, VariableSourceMap } from '@scaffdog/core';
import * as z from 'zod';
export { ScaffdogAggregateError, ScaffdogError } from '@scaffdog/error';

type File = {
    skip: boolean;
    path: string;
    name: string;
    content: string;
};

type RawQuestionCheckbox = z.infer<typeof rawQuestionCheckboxSchema>;
declare const rawQuestionCheckboxSchema: z.ZodObject<{
    message: z.ZodString;
    choices: z.ZodArray<z.ZodString, "many">;
    multiple: z.ZodOptional<z.ZodBoolean>;
    initial: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    if: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
}, "strict", z.ZodTypeAny, {
    message: string;
    choices: string[];
    multiple?: boolean | undefined;
    initial?: string[] | undefined;
    if?: string | boolean | undefined;
}, {
    message: string;
    choices: string[];
    multiple?: boolean | undefined;
    initial?: string[] | undefined;
    if?: string | boolean | undefined;
}>;
type RawQuestionList = z.infer<typeof rawQuestionListSchema>;
declare const rawQuestionListSchema: z.ZodObject<{
    message: z.ZodString;
    choices: z.ZodArray<z.ZodString, "many">;
    multiple: z.ZodOptional<z.ZodBoolean>;
    initial: z.ZodOptional<z.ZodString>;
    if: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
}, "strict", z.ZodTypeAny, {
    message: string;
    choices: string[];
    multiple?: boolean | undefined;
    initial?: string | undefined;
    if?: string | boolean | undefined;
}, {
    message: string;
    choices: string[];
    multiple?: boolean | undefined;
    initial?: string | undefined;
    if?: string | boolean | undefined;
}>;
type RawQuestionConfirm = z.infer<typeof rawQuestionConfirmSchema>;
declare const rawQuestionConfirmSchema: z.ZodObject<{
    confirm: z.ZodString;
    initial: z.ZodOptional<z.ZodBoolean>;
    if: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
}, "strict", z.ZodTypeAny, {
    confirm: string;
    initial?: boolean | undefined;
    if?: string | boolean | undefined;
}, {
    confirm: string;
    initial?: boolean | undefined;
    if?: string | boolean | undefined;
}>;
type RawQuestionInput = z.infer<typeof rawQuestionInputSchema>;
declare const rawQuestionInputSchema: z.ZodObject<{
    message: z.ZodString;
    initial: z.ZodOptional<z.ZodString>;
    if: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
}, "strict", z.ZodTypeAny, {
    message: string;
    initial?: string | undefined;
    if?: string | boolean | undefined;
}, {
    message: string;
    initial?: string | undefined;
    if?: string | boolean | undefined;
}>;
type QuestionCheckbox = Omit<RawQuestionCheckbox, 'multiple'> & {
    type: 'checkbox';
};
type QuestionList = Omit<RawQuestionList, 'multiple'> & {
    type: 'list';
};
type QuestionConfirm = Omit<RawQuestionConfirm, 'confirm'> & {
    type: 'confirm';
    message: string;
};
type QuestionInput = RawQuestionInput & {
    type: 'input';
};
type Question = QuestionCheckbox | QuestionList | QuestionConfirm | QuestionInput;
type QuestionMap = Map<string, Question>;

type RawDocumentAttributes = z.infer<typeof rawAttrSchema>;
declare const rawAttrSchema: z.ZodObject<{
    name: z.ZodString;
    root: z.ZodString;
    output: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    ignore: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    questions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodUnion<[z.ZodObject<{
        message: z.ZodString;
        choices: z.ZodArray<z.ZodString, "many">;
        multiple: z.ZodOptional<z.ZodBoolean>;
        initial: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        if: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    }, "strict", z.ZodTypeAny, {
        message: string;
        choices: string[];
        multiple?: boolean | undefined;
        initial?: string[] | undefined;
        if?: string | boolean | undefined;
    }, {
        message: string;
        choices: string[];
        multiple?: boolean | undefined;
        initial?: string[] | undefined;
        if?: string | boolean | undefined;
    }>, z.ZodObject<{
        message: z.ZodString;
        choices: z.ZodArray<z.ZodString, "many">;
        multiple: z.ZodOptional<z.ZodBoolean>;
        initial: z.ZodOptional<z.ZodString>;
        if: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    }, "strict", z.ZodTypeAny, {
        message: string;
        choices: string[];
        multiple?: boolean | undefined;
        initial?: string | undefined;
        if?: string | boolean | undefined;
    }, {
        message: string;
        choices: string[];
        multiple?: boolean | undefined;
        initial?: string | undefined;
        if?: string | boolean | undefined;
    }>, z.ZodObject<{
        confirm: z.ZodString;
        initial: z.ZodOptional<z.ZodBoolean>;
        if: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    }, "strict", z.ZodTypeAny, {
        confirm: string;
        initial?: boolean | undefined;
        if?: string | boolean | undefined;
    }, {
        confirm: string;
        initial?: boolean | undefined;
        if?: string | boolean | undefined;
    }>, z.ZodObject<{
        message: z.ZodString;
        initial: z.ZodOptional<z.ZodString>;
        if: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    }, "strict", z.ZodTypeAny, {
        message: string;
        initial?: string | undefined;
        if?: string | boolean | undefined;
    }, {
        message: string;
        initial?: string | undefined;
        if?: string | boolean | undefined;
    }>]>]>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    output: (string | string[]) & (string | string[] | undefined);
    root: string;
    ignore?: string[] | undefined;
    questions?: Record<string, string | {
        message: string;
        choices: string[];
        multiple?: boolean | undefined;
        initial?: string[] | undefined;
        if?: string | boolean | undefined;
    } | {
        message: string;
        choices: string[];
        multiple?: boolean | undefined;
        initial?: string | undefined;
        if?: string | boolean | undefined;
    } | {
        confirm: string;
        initial?: boolean | undefined;
        if?: string | boolean | undefined;
    } | {
        message: string;
        initial?: string | undefined;
        if?: string | boolean | undefined;
    }> | undefined;
}, {
    name: string;
    output: (string | string[]) & (string | string[] | undefined);
    root: string;
    ignore?: string[] | undefined;
    questions?: Record<string, string | {
        message: string;
        choices: string[];
        multiple?: boolean | undefined;
        initial?: string[] | undefined;
        if?: string | boolean | undefined;
    } | {
        message: string;
        choices: string[];
        multiple?: boolean | undefined;
        initial?: string | undefined;
        if?: string | boolean | undefined;
    } | {
        confirm: string;
        initial?: boolean | undefined;
        if?: string | boolean | undefined;
    } | {
        message: string;
        initial?: string | undefined;
        if?: string | boolean | undefined;
    }> | undefined;
}>;
type DocumentAttributes = Omit<RawDocumentAttributes, 'questions'> & {
    questions: QuestionMap;
};
type Document = DocumentAttributes & {
    path: string;
    templates: Template[];
    variables: VariableSourceMap;
};

/**
 * Public API
 */
type GenerateInputsResolver = (context: Context) => Promise<VariableRecord>;
type GenerateInputs = VariableRecord | GenerateInputsResolver;
type GenerateOptions = {
    inputs?: GenerateInputs;
};
type Scaffdog = {
    path: {
        project: string;
        config: string;
    };
    config: ResolvedConfig;
    list: () => Promise<Document[]>;
    generate: (document: Document, output: string, options?: GenerateOptions) => Promise<File[]>;
};
/**
 * createScaffdog
 */
type ScaffdogFactoryOptions = LoadConfigResult & Partial<{
    cwd: string;
}>;
type ScaffdogFactory = (options: ScaffdogFactoryOptions) => Scaffdog;
/**
 * loadScaffdog
 */
type ScaffdogLoaderOptions = {
    cwd: string;
};
type ScaffdogLoader = (path: string, options?: Partial<ScaffdogLoaderOptions>) => Promise<Scaffdog>;

declare const version: string;
declare const createScaffdog: ScaffdogFactory;
declare const loadScaffdog: ScaffdogLoader;

export { Document, DocumentAttributes, File, GenerateInputs, GenerateInputsResolver, GenerateOptions, Question, QuestionCheckbox, QuestionConfirm, QuestionInput, QuestionList, QuestionMap, Scaffdog, ScaffdogFactory, ScaffdogFactoryOptions, ScaffdogLoader, ScaffdogLoaderOptions, createScaffdog, loadScaffdog, version };
